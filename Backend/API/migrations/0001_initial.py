# Generated by Django 4.2.15 on 2024-11-05 20:48

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('gender', models.CharField(choices=[('M', 'M'), ('F', 'F'), ('N', 'N')], default='N', max_length=2, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('two_fa', models.BooleanField(default=False)),
                ('otp_code', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_time', models.DateTimeField(blank=True, null=True)),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'UserInfo',
                'verbose_name_plural': 'UserInfo',
                'db_table': 'UserInfo',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserGameStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=0)),
                ('rank', models.CharField(choices=[('Beginner', 'Beginner'), ('Amateur', 'Amateur'), ('Semi-Pro', 'Semi-Pro'), ('Pro', 'Pro'), ('World Class', 'World Class'), ('Legendary', 'Legendary'), ('Ultimate', 'Ultimate')], default='Beginner', max_length=20)),
                ('won_games', models.IntegerField(default=0)),
                ('lost_games', models.IntegerField(default=0)),
                ('draw_games', models.IntegerField(default=0)),
                ('won_tournaments', models.IntegerField(default=0)),
                ('total_tournaments', models.IntegerField(default=0)),
                ('experience_points', models.IntegerField(default=0)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'UserGameStats',
                'verbose_name_plural': 'UserGameStats',
                'db_table': 'UserGameStats',
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('notification_type', models.CharField(choices=[('Friend Request', 'Friend Request'), ('Game Request', 'Game Request'), ('Game Result', 'Game Result'), ('Chat', 'Chat'), ('Tournament', 'Tournament')], max_length=20)),
                ('notification_content', models.TextField()),
                ('notification_date', models.DateTimeField(auto_now_add=True)),
                ('notification_id', models.AutoField(primary_key=True, serialize=False)),
                ('notification_is_read', models.BooleanField(default=False)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notification',
                'db_table': 'Notification',
            },
        ),
        migrations.CreateModel(
            name='GameResults',
            fields=[
                ('score_1', models.IntegerField(default=0)),
                ('score_2', models.IntegerField(default=0)),
                ('game_date', models.DateTimeField(auto_now_add=True)),
                ('is_draw', models.BooleanField(default=False)),
                ('game_id', models.AutoField(primary_key=True, serialize=False)),
                ('player_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winner', to=settings.AUTH_USER_MODEL)),
                ('player_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loser', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'GameResults',
                'verbose_name_plural': 'GameResults',
                'db_table': 'GameResults',
                'indexes': [models.Index(fields=['player_1', 'player_2'], name='GameResults_player__8e06ae_idx')],
            },
        ),
        migrations.CreateModel(
            name='FriendshipLists',
            fields=[
                ('friendship_date', models.DateTimeField(auto_now_add=True)),
                ('friendship_id', models.AutoField(primary_key=True, serialize=False)),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'FriendshipList',
                'verbose_name_plural': 'FriendshipList',
                'db_table': 'FriendshipList',
                'indexes': [models.Index(fields=['user', 'friend'], name='FriendshipL_user_id_f11bcb_idx')],
                'unique_together': {('user', 'friend')},
            },
        ),
        migrations.CreateModel(
            name='FriendRequests',
            fields=[
                ('request_status', models.CharField(choices=[('P', 'P'), ('D', 'D'), ('A', 'A'), ('U', 'U')], default='Pending', max_length=20)),
                ('friend_request_id', models.AutoField(primary_key=True, serialize=False)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_requests', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'FriendRequests',
                'verbose_name_plural': 'FriendRequests',
                'db_table': 'FriendRequests',
                'indexes': [models.Index(fields=['sender', 'receiver'], name='FriendReque_sender__89be43_idx')],
            },
        ),
        migrations.CreateModel(
            name='Conversations',
            fields=[
                ('message_content', models.TextField()),
                ('message_date', models.DateTimeField(auto_now_add=True)),
                ('message_id', models.AutoField(primary_key=True, serialize=False)),
                ('receiver_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_receiver', to=settings.AUTH_USER_MODEL)),
                ('sender_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_sender', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Conversation',
                'verbose_name_plural': 'Conversation',
                'db_table': 'Conversation',
                'indexes': [models.Index(fields=['sender_id', 'receiver_id'], name='Conversatio_sender__d3165c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Chats',
            fields=[
                ('chat_status', models.CharField(choices=[('chatted', 'chatted'), ('not_chatted', 'not_chatted')], default='not_chatted', max_length=20)),
                ('chat_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_1_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_1_instance', to=settings.AUTH_USER_MODEL)),
                ('user_2_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_2_instance', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Chat',
                'verbose_name_plural': 'Chat',
                'db_table': 'Chat',
                'indexes': [models.Index(fields=['user_1_id', 'user_2_id'], name='Chat_user_1__81899c_idx')],
                'unique_together': {('user_1_id', 'user_2_id')},
            },
        ),
    ]
